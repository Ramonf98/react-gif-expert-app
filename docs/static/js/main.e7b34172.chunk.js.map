{"version":3,"sources":["Components/AddCategory.js","Components/GifGridItem.js","helpers/getGifs.js","Components/GifGrid.js","Hooks/useFetchGifs.js","Components/GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","value","onChange","console","log","target","className","type","placeholder","GifGridItem","title","url","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","toUpperCase","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEVC,mBAAS,IAFC,mBAExCC,EAFwC,KAE5BC,EAF4B,KAoBhD,OACI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAACS,GAAD,OAAYP,GAAZ,mBAA2BO,OAC1CN,EAAc,OAOd,2BACAO,MAAOR,EACPS,SApBkB,SAACN,GAEvB,OADAO,QAAQC,IAAI,6BACLV,EAAeE,EAAES,OAAOJ,QAmB3BK,UAAU,gBACVC,KAAK,OACLC,YAAY,yBCTTC,EAnBK,SAAC,GAAqB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC3B,OACI,yBAAKL,UAAU,8CACX,yBACAA,UAAU,MACVM,IAAKD,EACLE,IAAI,mBAGJ,uBAAGP,UAAU,YACRI,K,uBCMFI,EAnBF,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACNL,EADM,iDAC8CM,UAAUF,GADxD,8DAEUG,MAAOP,GAFjB,cAENQ,EAFM,gBAGUA,EAAKC,OAHf,uBAGLC,EAHK,EAGLA,KAGDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRf,MAAOc,EAAId,MACXC,IAAG,UAAEa,EAAIE,cAAN,aAAE,EAAYC,iBAAiBhB,QAV9B,kBAeLW,GAfK,4CAAH,sDCiCEM,EA5BC,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAAc,ECFJ,SAAEA,GAAc,MAEdvB,mBAAS,CAC/B6B,KAAM,GACNQ,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAW,WACNlB,EAASC,GACJkB,MAAM,SAAAX,GACIS,EAAU,CACVV,KAAMC,EACNO,SAAS,SAG1B,CAAEd,IAIEe,EDfmBI,CAAcnB,GAAhCM,EAFoB,EAEpBA,KAAMQ,EAFc,EAEdA,QAGd,OACI,6BACI,wBAAIvB,UAAU,sDAAwDS,EAASoB,eAC7EN,GAAW,uBAAGvB,UAAU,oCAAb,cAEb,yBAAKA,UAAU,iBAGPe,EAAKE,KAAK,SAACC,GACP,OAAO,kBAAC,EAAD,eACCY,IAAKZ,EAAIC,IACLD,UEerBa,EA/BM,WAAQ,IAAD,EACY7C,mBAAS,CAAC,aADtB,mBACjB8C,EADiB,KACL/C,EADK,KAUxB,OACI,oCACA,yBAAKe,UAAU,UACX,8CACA,kBAAC,EAAD,CAAaf,cAAgBA,KAEjC,yBAAKe,UAAU,aACX,4BAEQgC,EAAWf,KAAI,SAACR,GACZ,OAAO,kBAAC,EAAD,CACPqB,IAAKrB,EACLA,SAAUA,WCtBlCwB,IAASC,OAAQ,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.e7b34172.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n    //State\r\n    const [ inputValue, setInputValue ] = useState('');\r\n    //Manejo del valor del Input\r\n    const handledInputValue = (e)=>{\r\n        console.log('handledInputValue Llamado');\r\n        return setInputValue( e.target.value );\r\n    }\r\n\r\n    //Manejo del evento Submit\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        //Si el input no esta vacio\r\n        if( inputValue.trim().length > 2){\r\n            setCategories( (cats) => [ inputValue, ...cats] );\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n            value={inputValue}\r\n            onChange={handledInputValue} //Se dispara cada vez que la caja de texto cambie\r\n            className=\"inputCategory\" \r\n            type=\"text\"\r\n            placeholder=\"Write Something...\">\r\n            </input>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst GifGridItem = ( { title, url} ) => {\r\n    return (\r\n        <div className=\"gifCard animate__animated animate__fadeIn \">\r\n            <img \r\n            className=\"gif\" \r\n            src={url} \r\n            alt=\"Gif No cargado\">\r\n            </img>\r\n            \r\n            <p className=\"gifTitle\">\r\n                {title}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\nGifGridItem.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired\r\n}\r\nexport default GifGridItem\r\n\r\n","const getGifs = async ( category ) => {\r\n    const url    =  `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=8&api_key=EzOt9YB7wuEldUC2xAtzIa3HBDB2pX2k`;\r\n    const resp   =  await fetch( url );\r\n    const {data} =  await resp.json();\r\n\r\n    //Creamos un objeto que contendra los datos que nos importan de la respuesta de la peticion.\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n            //Preguntamos si vienen las imagenes en la peticion con ?\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n    \r\n}\r\n\r\nexport default getGifs;\r\n","import React from 'react';\r\nimport GifGridItem from './GifGridItem';\r\nimport PropTypes from 'prop-types';\r\nimport { useFetchGifs } from '../Hooks/useFetchGifs';\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    const { data, loading } = useFetchGifs( category );\r\n\r\n    //Retorno del componente al DOM\r\n    return (\r\n        <div>\r\n            <h3 className=\"categoryName animate__animated animate__fadeInDown\" >{ category.toUpperCase() }</h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n            \r\n            <div className=\"gifsContainer\" >\r\n                {\r\n                    //AÃ±adiendo los gif al DOM\r\n                    data.map( (img)=>{\r\n                        return <GifGridItem \r\n                                key={img.id}\r\n                                {...img} //Le enviamos el id, title y url de manera independiente.\r\n                                />\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired,\r\n}\r\nexport default GifGrid;\r\n","import { useEffect, useState } from \"react\"\r\nimport getGifs from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    //Hooks useState & useEffect\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect( ( ) => { \r\n         getGifs( category )\r\n             .then( gifs => {\r\n                        setState( {\r\n                        data: gifs,\r\n                        loading: false\r\n                    });\r\n            });       \r\n    }, [ category ] );\r\n   \r\n\r\n\r\n    return state; //{ data:[], loading: true }\r\n}\r\n","import React, {useState} from 'react'; \r\nimport { AddCategory } from './AddCategory';\r\nimport GifGrid from './GifGrid';\r\n\r\n//Functional Component\r\nconst GifExpertApp = ( ) => {\r\n    const [categories, setCategories] = useState(['Sherlock']);\r\n    \r\n /*    const handleAdd = ()=>{\r\n        // setCategories([...categories,'Education']  ); //Primera opcion\r\n        setCategories( (cats)=> [...cats, 'Education'] ); //Segunda opcion\r\n\r\n        //Cats es el valor anterior del estado.\r\n    } */\r\n\r\n    return (\r\n        <>\r\n        <div className=\"titulo\">\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n        </div>\r\n        <div className=\"container\">\r\n            <ol>\r\n                {\r\n                    categories.map((category)=>{\r\n                        return <GifGrid \r\n                        key={category} \r\n                        category={category} />\r\n                    })\r\n                }\r\n            </ol>\r\n        </div>\r\n        </>\r\n        );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './Components/GiftExpertApp'\n\nReactDOM.render( <GifExpertApp />, document.getElementById('root') );\n\n"],"sourceRoot":""}