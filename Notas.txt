
Seccion 2 Introduccion a React Y Conceptos Generales ------------------------------------

--------------------------------- 07 ¿Qué Es React? ---------------------------------
Es una libreria para desorrollar aplicaciones sencillas o altamente robusta.
 
JSX = JS + XML

--------------------------------- 08 Primeros Pasos --------------------------------- 
Babel se encarga de hacer la traduccion de un codigo moderno a un codigo que los navegadores puedan soportar.

<script type="text/babel"> //text/babel es para habilitar la traduccion de babel.
</script>

ReactDOM.render('elemento que se va a renderizar', 'dentro de que elemento') //Es para rendereizar

--------------------------------- 09 Introduccion a Babel --------------------------------- 
const resApi = {
    //personajes: ['Goku', 'Vegeta']
}

console.log( resApi.personajes?.length)

Suponiendo que estamos esperando una respuesta desde una API para cargar personajes,
se nos puede presentar la situacion de que por x razon no cargan los personajes, entonces
para controlar la exepcion de que si carga o no los personajes se le agrega el signo ?
tal y como se ve el codigo.










Seccion 3 Introduccion a JavaScript Moderno ------------------------------------
--------------------------------- 12 Bases de JavaScript --------------------------------- 

Crear aplicacion de React.

Utilizando node.js.

1 npx --version    --> tiene que reresar una version arriba de la 6.14

2 posicionarse en la carpeta donde se creara la aplicacion.

3 npx create-react-app my-app   --> Configura un ambiente sin tener que hacer la configuracion manuelmente de babel, etc.

4 yarn/npm start      --> Es para empezar el entorno de desarrollo

Web Pack    --> Toma todo el codigo que escribimos para pasarlo por babel y otras configuraciones, detecta el cambio
                y actualiza el navegador web.



--------------------------------- 13 Variables y Constantes --------------------------------- 
Evitar usar var a toda costa.

Usar let o const.
La mayor parte del tiempo se utiizara const

Parsing error significa que alog se escribio mal en javascript.

ctrl + space es para que te tire la ayude de autocompletado vs code.

--------------------------------- 14 Template Strings --------------------------------- 
`` Acento grave o backticks


--------------------------------- 15 Objetos Literales --------------------------------- 
Un objeto literal se identifica con {} 

__proto__  -->  El prototype es el ADN de un objeto, por dercirlo de algun modo.
                Contiene las funciones y metodos, getters y setter y demas propiedades
                que tienen implicitos todos los objetos.

Al mostrar un objeto en consola, el navegador mostrara sus propiedades ordenadas alfabeticamente.

Cuando hacemos el siguiente codigo:
*/
const persona2 = persona;
/*
Lo que estamos haciendo es asignar a la constante persona 2, una referencia hacia el objeto persona.
Por lo que si cambiamos un atributo, por ejemplo el nombre, ese atributo se va a cambiar directamente en
la clase de persona.
En otra palabras persona2 no esta instanciando al objeto persona, mas bien es un acceso directo a ese objeto.
Entonces si yo quiero hacer un clon de la clase persona que trabaje de forma independiente sin afectar a la misma
lo mas facil seria hacer un nuevo objeto con cada una de las propiedades de persona, utilizand el operador spread para
facilitarnos la escritura del codigo.
--------------------------------- 16 Arreglos --------------------------------- 
Los arreglos no son mas que una coleccion de informacion guardada en una misma variable.

Para insertar un elemento a un arreglo, no hay que usar el metodo push, debido a que este modifica el objeto principal.
Si, los arreglos tambien son objetos.

La funcion map, de un arreglo realiza un recorrido por cada elemento del arreglo y ejecuta funcion especifica a cada elemeto del arreglo
durante el recorrido.

--------------------------------- 17 Funciones --------------------------------- 
Una de las ventajas que tienene las funciones flechas es que pueden simplificarse demasiado
a comparacion de una funcion tradicional, como resultado tendremos menos lineas de codigo.

Algo importante a la hora de querer retornar un objeto en una funcion flecha simplificada, esque debemos encerrar el cuerpor de la flecha entre ().

--------------------------------- 18 Desestructuracion de objetos --------------------------------- 
Algo que es muy usado es la desestructuracion directamente en el argumento de una funcion.

--------------------------------- 19 Desestructuracion de arreglos --------------------------------- 
Podemos cambiqr todas las referencias que existen de una variable con poscicionarnos sobre ella y presion f2 o fn+f2.
De este modo podremos escribir un nuevo nombre para esa variable que se cambiara en todas las lineas donde este referenciada.
en vez de ir linea por linea cambiando el nombre

--------------------------------- 20 Import, export y funciones comunes de arreglos --------------------------------- 
Si necesitamos hacer una importacion de algo, en el archivo donde esta la informacion que queremos importar, debe existir un export.
Es decir la informacion debe estar exportada para poder ser importada.

Hay varias formas de hacer exportaciones.


--------------------------------- 21 Multiples exportaciones y exportaciones por defecto --------------------------------- 

Las exportaciones por defecto suceden cuando solo tenemos una unica cosa que exportar.

Cunado queremos importar una exportacion por defecto se puede hacer sin {}.
Pero cuando queremos importar una exportacion especifica tenemos que colocarla dentro de {}.


--------------------------------- 22 Promesas --------------------------------- 
Nada anotado.

--------------------------------- 23 Fetch API --------------------------------- 
Nos permite hacer peticiones HTTP integrada en js, simila a librerias como axios.










Seccion 4 Primeros Pasos en React ------------------------------------
-------------- 30. ¿Qué son los componentes en react?
Los componentes son una pequeña pieza de codigo encapsulada reutilizable que puede tener estado o no.

Los componentes puden tener componentes hijos, es decir, componentes dentro de otros componentes.

El estado es el como se encuentra la informacion del componente en un punto determinado del tiempo.

--------------32 Estructura de los directorios e una aplicacion en react
 node_modules  --> Contiene muchos modulos y paquetes que solo funcionan en el desarrollo
 public        --> favicon = icono de la pagina que se pone en la pestaña del navegador.
               --> logo192 o logo 512 = Son los iconos  que se muestran si nosotros instalamos nuestra aplicacion
                   web como una pwa, progresive web aplication.
               --> manifest.json = configuracion que se hace de las pwa. no tiene nada que ver con react.
               --> Robots = son configuraciones que vienen por defecto que le sirven a los robots de google por ejemplo, cuando
                   la aplicacion ya se ha desplegado, tampoco tiene que ver con react.
               --> index.html = Este si tiene que ver con react

gitignore      --> node_modules => No son librerias que creamos nosotros por lo que no es necesario darle un seguimiento.
               --> coverage => es una carpeta que se genera en el testing
               --> build => Es la careta de produccion, que seria el producto final.

package        --> Por lo regular no se modifica directamente. Contiene informacion de la aplicacion, la version, las herramientas que se usan.
               --> Los scripts contiene comandos definidos como lo es npm start. que es un acceso diecto a otro comando de react.
               --> El readme es un archivo que ejecuta la aplicacion.

--------------33 Contenido de la carpeta SRC
La carpeta SRC contiene
app.css     => contiene los estilos por defecto de la aplicacion app.js
app.test.js => Es el archivo que va ejecutar el comando npm test, para poder realizar pruebas al app.js
index.css   =>archivo de estilos global que se encuentra importado en el index.js
index.js    => es el punto incial de la aplicacion

el Service worker no tiene nada que ver con react, si no con las pwa, se usa precisamente para hacer nuestra aplicacion web una pwa.
El setupTest se ejecuta exactamente en el momento que ejecutamos las pruebas.}


--------------34 Hola Mundo en React 
A partir de este video se borran todos los arhcivo dentro de SRC. en 03-Counter-app
ReactDOM es el encargado de hacer las renderizaciones en el HTML.

Cuando renderizas algo, siempre sera en el div con el id de root, que esta ubicado en la carpeta public en index.html.

--------------35 Nuestro Primer Componente
Un estandar para poder identificar un componente, es que el nombre que se le da tiene que esta capitalizado.

Por ejemplo primeraapp = PrimeraApp.js
Con eso sabriamos que PrimeraApp.js es un componente.

En React, tenemos dos tipos de componentes, los que estan basados en clases y los que estan basados en funciones.
React actualmente esta empujando que los componentes sean basados en funciones, functional components, antes se llamaban
stateless functional components porque no podian manejar estado, pero desde que React introdujo los hooks eso cambio.


Algo que me parece muy interesante, es que en el video menciona que es buena practica poner las propiedades en los archivos 
css ordenadas alfabeticamente.


--------------36 Retornar elementos en el componente - fragment.
El codigo que nosotro trabajamos en react, cuando lo compilamos este pasa por babel para ser convertido a javascript puro.

Un componente se compone por varias lineas de html en su mayoria, entonces como retornamos esas lineas de codigo?

La solucion esta en encerrar esas lineas en un contenedor que las contenga a todas, en su caso un div.
Pero que sucede cuando tenemos varios componentes? Si encerramos las lineas en un div, al momento de renderizar habra div's 
que esten con la unica funcion especifica de contener esas lineas de codigo html que retornemos desde react, en pocas palabras
div's innecesarios.
La solucion a eso son los fragments.

Pero ya depende de nosotros si suaremos esos div para darle estilos css a nuestro componentes hijo, o si bien no ocupamos un div
y poder introducir los elementos en un contenedor que ya existe en el html.

Una forma corta de colocar un fragment es usar las puras etiquetas sin nombre <></>. con esto no habria necesidad de importar el fragment.

--------------37 Impresion de variables en el HTML.
Para poder imprimir una variable dentro de una etiqueta html de un componente, se usan { variable } las llaves.
Cosas que no se pueden imprimir en el html de forma directa:
    booleanos
    objetos => La forma mas sencilla es usar JSON.stringify(objeto), para poder convertir el objeto a un JSON.
    arreglo => Si los imprime, pero concatena sus elementos en una cadena.

La etiqueta <pre></pre>, formatea la fuente para que lo que se imprima dentro se muestre como si fuera un codigo.

--------------38 Comunicacion entre compunentes - Props
Props = Properties.

Son propiedades que nosotros le asignamos al componente desde el componente padre para poder trabajar con esa informacion
desde nuestro componente.

Todos los componentes reciben Properties.

--------------39 PropTypes
Por ejemplo si queremos obligar a que la persona que use nuestro componente nos envie obligatoriamente el parametro saludo
para ello debemos hacer uso del PropType.

PropTypes son los tipos de las properties que reciben los componentes

--------------40 DefaultProps
Para mandar un prop por defecto se puede implementar los parametros por defecto pero tambien hay otra manera.
llamando a la propiedad defaultProps.

El codigo de este video se encuentra mezclado con el de PropTypes ya que es un tema muy corto.
--------------41 Componente CounterApp
Snippet rafcp => Crea un functional component de react con proptypes.

--------------42 Evento Click (Eventos en General)

--------------43 useState - Hook
Un hook no es mas que una funcion.
Hay muchos hooks, normalmente cuando vemos la palabra "use" seguido de algo, por ejemplo "useState"
, "useCallback" eso es un hook.

useState es una funcion que recibe un valor, y devuelve un arreglo,
donde el primer valor del arreglo es igual al valor que le pasamos, y el segundo valor del arreglo
es una funcion que normalmente se usa para establecer o modificar el valor de la primera posicion.










Seccion 5 Pruebas Unitarias y de integracion (Probando la seccion anterior) ------------------------------------
------------------48 Pruebas Unitarias y de Integracion
¿Que son las pruebas Unitarias?
    Se enfocan en pequeñas funcionalidades de la aplicacion.
¿Que son las pruebas Unitarias?
    Estan enfocadas en como reaccionan varias piezas en conjunto.

Caracteristicas de las pruebas
Tienen que ser
    Faciles de escribir
    Faciles de leer
    Confiables
    Rapidas
    Principalmente Unitarias

Primero se realizan las unitarias para despues realizar las de integracion.

En las pruebas de integracion se prueban todas las pequeñas piezas de la aplicacion en conjunto.
Despues de haber probado unitariamente cada pieza.
En pruebas de integracion nos enfocamos en que las piezas unitarias trabajen bien entre si.
Dando lugar a los pasos A A A.
Arrange - Arreglar
    Preparamos el estado inicial
        Inicializamos variables
        Importaciones necesarias
Act     - Actuar
    Aplicamos acciones o estimulos
        Llamada de metodos
        Simular clicks
        Realizar acciones sobre el paso anteior
Assert  - Afirmar
    Observar el comportamiento resultante
        Son los resultados esperados
        Ej. que algo cambie, algo incremente o bien que nada suceda
    

------------------50 Mi primera prueba
Para correr las pruebas de react se ocupa correr el siguiente comando
npm run test

Dicho comando ya viene precargado con ciertas configuraciones basicas o estandar para
realizar pruebas con jest, una librearia muy utilizada para realizar pruebas con react.

Cuando se ejecuta el comando, se ejecutaran todas la pruebas que se encuetren en los archivos
.test.js

Las pruebas llevan la siguiente estructura
El primer argumento debe ser un string que describa que es lo que estamos probando.
test('string', ()=>{

})

------------------51 Jest-Expect.toBe
Expect.toBe es un metodo muy comun usado de la libreria Jest.
Para probar la igualdad de dos variables.
Expect(variable que se va a comparar).toBe(que sea igual a esta variable que se ponga aqui).

La funcion describe, se utiliza para describir que pruebas se estan realizando, y engloba todas las pruebas que se van a realizar.


------------------52 Pruebas en el archivo 02 template strings
Para poder obtener ayudas a la hora de escribir codigo (autocompletado y esas cosas),  podemos importar la libreria de jest directamente
import '@testing-library/jest-dom';

------------------53 To Equal
Se trabaja sobre el archivo 05-Funciones
Cuando quermos comparar la igualdad de un objeto con otro no podemos utilizar el operador === que es lo que usa el metodo toBe
de la libreria de Jest, Lo que se recumienda es usar el metodo toStrictEqual para poder hacer una comparacion profunda.


------------------56 Pruebas con tareas ascincronas y promesas.
En este video mencionan que el parametro "done" el cual es pasado por parametro en la funcion flecha del test, 
Done es un callback se encarga de indicar cuando una prueba ya se ha finalizado.
La idea es llamar al done despues del expect, para indicar que la prueba se acabo.

------------------58 "Pruebas sobre componentes en React"

Para poder aplicar pruebas a los componentes debemo simular una renderizacion, para ello utilizamos creacion de una constante
en este caso wrapper, esa constante va obtener el valor del metodo render de la libreria testing de react.

render(), recibe el componenete que queremos renderizar.

Cuando llamamos al metodo render, y lo guardamos en una variable, podemos aplicarle varios metodos gracias al testing-library de react.
Es un poco confuso trabajar con tal libreria con los componentes debido a la enorme cantidad de metodos que ofrece.
Por eso en su lugar trabajamos con enzyme, una utilidad de testing de javascript para react.

En el video creamo un archivo setupTests.js, en el cual imprtamos algo necesrio para poder expandir el metodo expect
y de ese modo llevar a cabo la evaluacion.

En fin, quien sea que lea esto, no te hagas bolas, lo unico que se esta haciendo es probar el componenete
para ello ocupamos expandir un poco mas el metodo expect y simular que estamos renderizando el componente por que en consola
no se puede imprimir un componente como tal.

Lo mas confuso pudo haber sido que se creo un archivo nuevo en el src, setupTest.js, ese archivo lo unico que hace es importar los metodos
para expendir el metodo expect de la libreria de jest.

Al final le decimos que busque nuesto saludo en el componente, y que esperamos que ese saludo este en ese componente, si esta en ese componenete la prueba pasa
pero si no lo esta, no.

------------------59 Enzyme Testing Unit

Enzyme se puede concetar con distintos sistemas de pruebas
En este video es donde se hacen las importaciones de Enzyme a setupTest.js
Shallow es parecido al render pero da opciones mas interesantes como simular clicks.

Y debido a que ocupamos una fotografia para mirar como se encuentra el componenete ya renderizando
utilizaremos una extension de enzyme, enzyme to json.

npm install --save-dev enzyme-to-json

Despues de su instalacion se hace una ultima configuracion en el setupTest.

Entonces gracias a la librerai de enzyme-to-json es que podemos comparar "fotografias" del codigo de la aplicacion
y aplicarle las pruebas necesarias.

------------------60 Revisar elementos dentro del componente
Usualmente cuando copemos y pegamos codigo significa que hay paso para hacer optimizaciones.

El metodo shallow devuelve todo la info del componente renderizado y lo almacena en la variable wrapper.
Por consecuente si nosotros podemos almacenar un texto o una informacion que contenta el wrapper.

Wrapper.find viene siendo igual que document.querySelector.
Lo que pasa es que el primero nos ayuda encontrar la informacion almacenada en una variable
Mientras que el segundo nos ayuda a encontrar la informacion en el DOM.










Seccion 6 Gif Expert App ------------------------------------
-----------------70 Creando una lista de categorias---------------------

En el minuto 2:06 queremos imprimir una lista de categorias en el html.
Podriamos pensar que podemos hacerlo con un ciclo for, pero en realidad no se puede en este caso porque se ocupa
establecer una expresion que retorne algo, y el ciclo for por defecto no retorna nada.

Por eso es que recurrimos a usar un metodo del arreglo, llamado map.

El key no puede ser el indice de un arreglo, por que si en un futuro el valor del arreglo cambia se generara un problema
por que el key siempre va ser el mismo pero puede contener diferentes valores.
El key debe ser unico.
 

 -----------------71 Component addCategory---------------------
"Nosotros no debemos trabajar a estar alturas con refresh del navegador debio a que eso algo muy antiguo."


Por ejemplo cuando llamamos al evento onSubmit, y le decimos que queremos ejecutar una funcion, a esa funcion se le pasa
el primer argumento del onSubmit automaticamente, Nosotros decidimos si lo recibimos en tal funcion o no.

-----------------72 Comunicacion entre Componentes---------------------

Se trabaja con Props para asignar a las categorias un nuevo elemento desde el componente AddCategory.js
Hay un error que dice que que un componenete esta cambiando de manera no controlada, en este caso este error se presento
debido a que el estado inicial no habia sido especificado.

-----------------73 Fetch API - Obtener las imagenes deciadas---------------------

En las funciones flecha tambien es posible envolwer el return en ();


-----------------74 useEffect---------------------
La necesidad de usar useEffect surge cuando al momento de cambiar el estado de algun componente con useState, React renderiza
todo el componente y dispara funciones que estan en el codigo pero que no deberian de ejecutarse en cada renderizacion.
Entonces para use se usa useEffect, para condicionar cuando se ejecutaran esas funciones.

Por ejemplo, el primer argumento de useEffect(), es un callback, que retorna la ejecucion de una funcion que queramos, el segundo es un arreglo de 
dependencias, el cual si no ponemos nada dentro del arreglo estaremos limitando a que la funcion se ejecute solamente una vez. Durante la primera renderizacion
y no cada que se cambie el estado.

-----------------75 Mostrar los titulos de las imagenes---------------------
Creacion de gifGridItem.js en el minuto 4:27.


-----------------77 Helpers---------------------
encodeURI(category)  => Remplaza los espacios de un string, cuando se hace una peticion a una api, la url no debe contener
espacios, entonces encodeURI lo que hace es remplazar los espacios por porcentajes, por ejemplo "La Casa Blanca" = "La%Casa%Blanca"
Entre mas cosas para hacer una peticion correcta.

La carpeta helpers en esta ocacion almacenara funciones en especifico para no redibujar el state sin necesidad.

En este video se explica la advertencia de useEffect, que habla de que falta agregar una dependencia al arreglo.
La advertencia nos pide que pensemos que si la categoria cambia, nosotros deberemos volver a renderizar los gifs con respecto 
a la categoria. Tal vez eso no sea posible debia a logica del programa puesto que la categoria es introducida en el input y una vez que se agrega al estado
esta ya no puede cambiar.
Pero de todos modos, para cumplir con la advertencia lo unico que se hizo fue agregar la variable category al arreglo de dependencias.
Minuto 6:47.


-----------------78 Custom Hooks---------------------
Los customs hooks es una forma de extraer logica de alun componente o de otra parte para ser reutilizada.

Estandar para identificar los Hooks
Todos empiezan con la palabara use, Ejmplo useHook.js

Recuerda, los hooks no son mas que funciones.

La difencia de los hooks y los functional components, es que no ocupas importar react cuando trabajas con hooks,
React solo lo ocupas cuando trabajamos con jsx.

Los custom hooks funcionan como si fueran functional components  pueden tener efectos, pueden usar reducer, pueden utilizar
contextos...

-----------------79 Obtener imagenes y bandera de carga---------------------
En este video, al inicio, volvemos a retormar el porque implementamos el useEffect.
Nosotros lanzamos una peticion a una api para poder traer gifs, pero lo que no queriamos esque cada vez que se renderizara el componente
o se cambiara el estado, se lanzara dicha peticion. por eso implemetamos el useEffect, para que la peticion sea lanzada solo en la primer
renderizacion.

El useEffect recive un callback que ejecuta el bloque o una funcion que queremos ejecutar, y un arreglo de dependencias.

Por ejemplo el que nosotros implementamos, es que lance la peticion a la API, unicacmente cuando la categoria cambie.

El useEffect No puede ser asincrono.

Operador && en ternario.

   loading && <p>Loading...</p>   => Forma Corta
   loading ? <p>Loading...</p> : null   => Forma Larga.









Seccion 7 Generacion del build de Produccion y despliegues en github Pages. ------------------------------------

----------------84 Preparacion del proyecto---------------------
En este video se explica el comando build, el cual genera una carpeta llamada build que es la que se despliega en los
servidores.

